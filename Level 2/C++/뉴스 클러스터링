#include <string>
#include <vector>
#include <algorithm>
#include <map>

using namespace std;

int inter = 0, uni = 0;
map<string,int> m1, m2;

vector<string> subset(string str) {
    vector<string> s;
    for (int i=0;i<str.size()-1;i++) {
        if (str[i] >= 97 && str[i] <= 122) {
            if (str[i+1] >= 97 && str[i+1] <= 122) {
                s.push_back(str.substr(i, 2));
            }
        }
    }
    return s;
}

map<string,int> chk(map<string,int> m, vector<string> s) {
    for (int i=0;i<s.size();i++) {
        if (m[s[i]])
            m[s[i]]++;
        else
            m[s[i]] = 1;
    }
    return m;
}

void J(vector<string> s) {
    for (int i=0;i<s.size();i++) {
        if (m1[s[i]] > 0 && m2[s[i]] > 0) {
            inter += min(m1[s[i]], m2[s[i]]);
            uni += max(m1[s[i]], m2[s[i]]);
            m1[s[i]] = -1;
            m2[s[i]] = -1;
        }
        else if (m1[s[i]] > 0 && m2[s[i]] <= 0) {
            uni += m1[s[i]];
            m1[s[i]] = -1;
        }
        else if (m1[s[i]] <= 0 && m2[s[i]] > 0) {
            uni += m2[s[i]];
            m2[s[i]] = -1;
        }
    }
}

int solution(string str1, string str2) {
    vector<string> s1, s2;
    
    transform(str1.begin(), str1.end(), str1.begin(), ::tolower);
    transform(str2.begin(), str2.end(), str2.begin(), ::tolower);
    s1 = subset(str1);
    s2 = subset(str2);
    
    sort(s1.begin(), s1.end());
    sort(s2.begin(), s2.end());
    m1 = chk(m1, s1);
    m2 = chk(m2, s2);
    
    J(s1);
    J(s2);
    
    return uni == 0 ? 65536 : inter / (float)uni * 65536;
}
