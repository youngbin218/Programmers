#include <string>
#include <vector>
#include <algorithm>

using namespace std;

string solution(string new_id) {
    string answer = "";
    char a[23] = {'~', '!', '@', '#', '$', '%', '^', '&', '*', '(', ')', '=', '+', '[', ']', '{', '}', ':', '?', ',', '<', '>','/'};
    
    transform(new_id.begin(), new_id.end(), new_id.begin(), ::tolower);
    
    for (int i=0;i<new_id.length();i++) {
        int chk = 0;
        for (int j=0;j<23;j++) {
            if (new_id[i] == a[j])
                break;
            else
                chk++;
        }
        if (chk == 23)
            answer.push_back(new_id[i]);
    }
    
    vector<int> tmp;
    int chk = 0;
    for (int i=0;i<answer.length()-1;i++) {
        if (answer[i] == answer[i+1] && answer[i] == '.')
            tmp.push_back(i+1);
    }
    for (int i=0;i<tmp.size();i++) {
        answer.erase(answer.begin()+(tmp[i]-chk));
        chk++;
    }
    
    if (answer.front() == '.')
        answer.erase(answer.begin());
    if (answer.back() == '.')
        answer.pop_back();
    
    if (answer.empty())
        answer.push_back('a');
    
    if (answer.length() >= 16)
        answer = answer.substr(0, 15);
    if (answer.back() == '.')
        answer.pop_back();
    
    if (answer.length() <= 2) {
        while (answer.length() != 3)
            answer.push_back(answer.back());
    }
    
    return answer;
}
